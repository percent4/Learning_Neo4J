1. CREATE

- 创建没有属性的节点
- 使用属性创建节点
- 在没有属性的节点之间创建关系
- 使用属性创建节点之间的关系
- 为节点或关系创建单个或多个标签

```
CREATE (
   <node-name>:<label-name>
   { 	
      <Property1-name>:<Property1-Value>
      ........
      <Propertyn-name>:<Propertyn-Value>
   }
)
```

例如：

```
CREATE (dept:Dept { deptno:10,dname:"Accounting",location:"Hyderabad" });
```

2. MATCH

从数据库获取有关节点，关系和属性的数据

例如：

```
MATCH (dept:Dept);
```

3. RETURN

- 检索节点的某些属性
- 检索节点的所有属性
- 检索节点和关联关系的某些属性
- 检索节点和关联关系的所有属性

```
RETURN 
   <node-name>.<property1-name>,
   ........
   <node-name>.<propertyn-name>
```

例如：

```
RETURN dept.deptno
```

MATCH + RETURN

```
MATCH (dept:Dept)
RETURN dept.deptno, dept.dname;
```

4. 关系基础

单向和双向

- 在两个现有节点之间创建无属性的关系

- 在两个现有节点之间创建与属性的关系

- 在两个新节点之间创建无属性的关系

- 在两个新节点之间创建与属性的关系

- 在具有WHERE子句的两个退出节点之间创建/不使用属性的关系


使用Neo4j CQL CREATE命令

- 为节点创建单个标签
- 为节点创建多个标签
- 为关系创建单个标签

单个标签到关系
语法：

```
CREATE (<node1-name>:<label1-name>)-
	[(<relationship-name>:<relationship-label-name>)]
	->(<node2-name>:<label2-name>)
```

例如:

```
CREATE (e:Customer)-[r1:Has]->(cc:CreditCard);
```

5. WHERE

插入数据：

```
CREATE (emp:Employee {deptno:10, name:"Abc", empid:1001, salary:25000});
CREATE (emp:Employee {deptno:20, name:"Pqr", empid:1002, salary:45000});
CREATE (emp:Employee {deptno:10, name:"Mno", empid:1003, salary:5000});
CREATE (emp:Employee {deptno:30, name:"Xyz", empid:1004, salary:15000});
```

查询1：

```
MATCH (emp:Employee)
RETURN emp.deptno, emp.name, emp.empid, emp.salary;
```

结果：

```
│"emp.deptno"│"emp.name"│"emp.empid"│"emp.salary"│
╞════════════╪══════════╪═══════════╪════════════╡
│10          │"Abc"     │1001       │25000       │
├────────────┼──────────┼───────────┼────────────┤
│20          │"Pqr"     │1002       │45000       │
├────────────┼──────────┼───────────┼────────────┤
│10          │"Mno"     │1003       │5000        │
├────────────┼──────────┼───────────┼────────────┤
│30          │"Xyz"     │1004       │15000       │
```

查询2：

```
MATCH (emp:Employee)
WHERE emp.name="Abc"
RETURN emp.deptno, emp.name, emp.empid, emp.salary;
```

输出：

```
╒════════════╤══════════╤═══════════╤════════════╕
│"emp.deptno"│"emp.name"│"emp.empid"│"emp.salary"│
╞════════════╪══════════╪═══════════╪════════════╡
│10          │"Abc"     │1001       │25000       │
└────────────┴──────────┴───────────┴────────────┘
```

查询3：

```
MATCH (emp:Employee)
WHERE emp.deptno=10
RETURN emp.deptno, emp.name, emp.empid, emp.salary;
```

输出：

```
╒════════════╤══════════╤═══════════╤════════════╕
│"emp.deptno"│"emp.name"│"emp.empid"│"emp.salary"│
╞════════════╪══════════╪═══════════╪════════════╡
│10          │"Abc"     │1001       │25000       │
├────────────┼──────────┼───────────┼────────────┤
│10          │"Mno"     │1003       │5000        │
└────────────┴──────────┴───────────┴────────────┘
```

使用WHERE子句创建两个现有节点之间的关系”。

语法

```
MATCH (<node1-label-name>:<node1-name>),(<node2-label-name>:<node2-name>) 
WHERE <condition>
CREATE (<node1-label-name>)-[<relationship-label-name>:<relationship-name>
       {<relationship-properties>}]->(<node2-label-name>) 
```

例如：

```
CREATE (e:Customer{id:"1001",name:"Abc",dob:"01/10/1982"});
CREATE (cc:CreditCard{id:"5001",number:"1234567890",cvv:"888",expiredate:"20/17"});
MATCH (e:Customer),(cc:CreditCard) 
WHERE e.id = "1001" AND cc.id= "5001" 
CREATE (e)-[r:DO_SHOPPING_WITH{shopdate:"12/12/2014",price:55000}]->(cc) 
RETURN r;
```

一个综合的演示：

```
MATCH (emp:Employee), (book:Book)
WHERE emp.name="Abc" AND book.name="Dive into Python"
CREATE (emp)-[r1:BUY]->(book)
return emp, book;
MATCH (emp:Employee), (book:Book)
WHERE emp.name="Pqr" AND book.name="Dive into Python"
CREATE (emp)-[r2:BUY]->(book)
return emp, book;
MATCH (emp:Employee), (book:Book)
WHERE emp.name="Mno" AND book.name="Dive into Python"
CREATE (emp)-[r3:BUY]->(book)
return emp, book;
MATCH (emp:Employee), (book:Book)
RETURN emp, book;
```

输出：

![](https://github.com/percent4/Storing_pictures/blob/master/buy.png)
